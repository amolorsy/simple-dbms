  options  {    static = true;    DEBUG_PARSER = false;  }  PARSER_BEGIN(SimpleDBMSParser)  import java.util.List;  import java.util.ArrayList;  import java.util.Map;  import relation.*;  import relation.column.*;  import relation.column.type.*;  import relation.column.value.*;  import util.*;  import predicate.*;  public class SimpleDBMSParser  {    private static RecordManager recordManager;    	    public static void main(String args[]) throws ParseException    {      SimpleDBMSParser parser = new SimpleDBMSParser(System.in);      recordManager = recordManager.getInstance();      recordManager.setup();      while (true)      {        try        {          System.out.print("DB_2013-11379> ");          parser.command();        }        catch (Exception e)        {          if (e.getMessage() != null)            Message.print(Message.PRINT_SYNTAX_ERROR, null);          SimpleDBMSParser.ReInit(System.in);        }      }    }  }  PARSER_END(SimpleDBMSParser)  SKIP : { " " | "\r" | "\t" | "\n" }  TOKEN : /* Keywords */  {    < EXIT : "exit" >  | < INT : "int" >  | < CHAR : "char" >  | < DATE : "date" >  | < CREATE_TABLE : "create table" >  | < DROP_TABLE : "drop table" >  | < DESC : "desc" >  | < SHOW_TABLES : "show tables" >  | < INSERT_INTO : "insert into" >  | < DELETE_FROM : "delete from" >  | < SELECT : "select" >  | < PRIMARY_KEY : "primary key" >  | < FOREIGN_KEY : "foreign key" >  | < REFERENCES : "references" >  | < AS : "as" >  | < IS : "is" >  | < NULL : "null" >  | < NOT : "not" >  | < NOT_NULL : "not null" >  | < WHERE : "where" >  | < FROM : "from" >  | < VALUES : "values" >  | < AND : "and" >  | < OR : "or" >  }  TOKEN :  {    < SEMICOLON : ";" >  | < LEFT_PAREN : "(" >  | < RIGHT_PAREN : ")" >  | < STAR : "*" >  | < QUOTE : "'" >  | < UNDERSCORE : "_" >  | < COMMA : "," >  | < PERIOD : "." >  | < SIGN : "+" | "-" >  | < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >  | < DIGIT : [ "0"-"9" ] >  | < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >  | < NN : < DIGIT > < DIGIT > >  | < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >  | < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >  | < ALPHABET : [ "A"-"Z", "a"-"z" ] >  | < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >  | < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >  | < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET >                          | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >  | < NON_QUOTE_SPECIAL_CHARACTERS : [ "`", "~", "!", "@", "#", "$", "%", "^",                                       "&", "*", "(", ")", "-", "_", "+", "=",                                       "\\", "|", ",", ".", "/", "?", "<", ">",                                       "{", "}", ";", ":", "[", "]" ] >  }  void command() :  {}  {    queryList()  | (      < EXIT >      < SEMICOLON >      {        recordManager.quit();        System.exit(0);      }    )  }  void queryList() :  {    int query;  }  {    (      {        // Initialize array lists to store results of execution        Message.getInstance().resetSchemaErrors();        Message.getInstance().resetCommandResults();      }      query = query()      < SEMICOLON >      {        if (query == Message.PRINT_CREATE_TABLE)        {          if (Message.getInstance().isSchemaErrorExist())          {            Message.Unit unit = Message.getInstance().getSchemaErrors().get(0);            Message.print(unit.getMessageType(), unit.getWord());            throw new ParseException();          }          else          {            // Error doesn't exist            Message.Unit unit = Message.getInstance().getCommandResults().get(0);            Message.print(unit.getMessageType(), unit.getWord());          }        }        if (query == Message.PRINT_DROP_TABLE)        {          ArrayList<Message.Unit> commandResults = Message.getInstance().getCommandResults();          for (Message.Unit unit : commandResults)            Message.print(unit.getMessageType(), unit.getWord());          // Check if error exists          if (Message.getInstance().isSchemaErrorExist())            throw new ParseException();        }              if (query == Message.PRINT_DESC)        {          if (Message.getInstance().isSchemaErrorExist())          {            Message.Unit unit = Message.getInstance().getSchemaErrors().get(0);            Message.print(unit.getMessageType(), unit.getWord());            throw new ParseException();          }        }        if (query == Message.PRINT_INSERT)        {          if (Message.getInstance().isSchemaErrorExist())          {            Message.Unit unit = Message.getInstance().getSchemaErrors().get(0);            Message.print(unit.getMessageType(), unit.getWord());            throw new ParseException();          }          else          {            // Error doesn't exist            Message.Unit unit = Message.getInstance().getCommandResults().get(0);            Message.print(unit.getMessageType(), unit.getWord());          }        }        if (query == Message.PRINT_DELETE)        {        }        if (query == Message.PRINT_SELECT)        {        }        Message.print(query, null);      }    )+  }  int query() :  {}  {    (      createTableQuery()      {        return Message.PRINT_CREATE_TABLE;      }    )  | (      dropTableQuery()      {        return Message.PRINT_DROP_TABLE;      }    )  | (      descQuery()      {        return Message.PRINT_DESC;      }    )  | (      showTablesQuery()      {        return Message.PRINT_SHOW_TABLES;      }    )  | (      insertQuery()      {        return Message.PRINT_INSERT;      }    )  | (      deleteQuery()      {        return Message.PRINT_DELETE;      }    )  | (      selectQuery()      {        return Message.PRINT_SELECT;      }    )  }  void createTableQuery() :  {    String tableName;    Table table;  }  {    < CREATE_TABLE >    tableName = tableName()    {      tableName = tableName.toLowerCase();            if (recordManager.isTableExist(tableName))      {        Message.getInstance().addSchemaError(new Message.Unit(Message.TABLE_EXISTENCE_ERROR, null));      }           table = new Table();      table.setTableName(tableName);    }    tableElementList(table)    {      if (!Message.getInstance().isSchemaErrorExist())      {        recordManager.save(table);        Message.getInstance().addCommandResult(new Message.Unit(Message.CREATE_TABLE_SUCCESS, tableName));      }    }  }  void dropTableQuery() :  {    ArrayList<String> tableNameList;  }  {    < DROP_TABLE >    tableNameList = tableNameList()    {      if (tableNameList.size() == 1 && tableNameList.get(0).equals("*"))      {        recordManager.dropAllTables();        Message.getInstance().addCommandResult(new Message.Unit(Message.DROP_SUCCESS_ALL_TABLES, null));      }      else      {        for (String tableName : tableNameList)        {          if (!recordManager.isTableExist(tableName))          {            Message.getInstance().addSchemaError(new Message.Unit(Message.NO_SUCH_TABLE, null));            Message.getInstance().addCommandResult(new Message.Unit(Message.NO_SUCH_TABLE, null));          }          else if (recordManager.getTableDictionary().get(tableName).getReferencingTable() != null)          {            Message.getInstance().addSchemaError(new Message.Unit(Message.DROP_REFERENCED_TABLE_ERROR, tableName));            Message.getInstance().addCommandResult(new Message.Unit(Message.DROP_REFERENCED_TABLE_ERROR, tableName));          }          else          {            recordManager.dropTable(tableName);            Message.getInstance().addCommandResult(new Message.Unit(Message.DROP_SUCCESS, tableName));          }        }      }    }  }  void descQuery() :  {    ArrayList<String> tableNameList;  }  {    < DESC >    tableNameList = tableNameList()    {      recordManager.printDesc(tableNameList);    }  }  void showTablesQuery() :  {}  {    < SHOW_TABLES >  }  void insertQuery() :  {    String tableName;    Table table = null;  }  {    < INSERT_INTO >    tableName = tableName()    {      if (!recordManager.isTableExist(tableName))        Message.getInstance().addSchemaError(new Message.Unit(Message.NO_SUCH_TABLE, null));      else        table = recordManager.load(tableName);    }    insertColumnsAndSource(table) // If table exists, variable table is not null, otherwise null.  }  void deleteQuery() :  {    ArrayList<String> referenceTables = new ArrayList<String>();    String tableName;    Table table = null;    WhereClause whereClause = null;  }  {    < DELETE_FROM >    tableName = tableName()    {      if (!recordManager.isTableExist(tableName))        Message.getInstance().addSchemaError(new Message.Unit(Message.NO_SUCH_TABLE, null));      else      {        table = recordManager.load(tableName);        referenceTables.add(tableName);      }    }    (      whereClause = whereClause(referenceTables)    )?    {      if (table != null)      {        table.deleteTuples(whereClause);        if (!Message.getInstance().isSchemaErrorExist())        {          recordManager.save(table);          Message.getInstance().addCommandResult(new Message.Unit(Message.DELETE_RESULT, null));        }      }    }  }  void selectQuery() :  {    ArrayList<SelectColumn> selectColumnList;  }  {    < SELECT >    selectColumnList = selectList()    tableExpression(selectColumnList)  }  ArrayList<SelectColumn> selectList() :  {    SelectColumn selectColumn;    ArrayList<SelectColumn> selectColumnList = new ArrayList<SelectColumn>();  }  {    < STAR >    {      selectColumn = new SelectColumn();      selectColumn.setColumnName("*");      selectColumnList.add(selectColumn);      return selectColumnList;    }  | (      selectColumn = selectColumn()      {        selectColumnList.add(selectColumn);      }      (        < COMMA >        selectColumn = selectColumn()        {          selectColumnList.add(selectColumn);        }      )*    )    {      return selectColumnList;    }  }  SelectColumn selectColumn() :  {    String tableName = null;    String columnName;    String nickName = null;  }  {    (      (        LOOKAHEAD(2)        tableName = tableName()        < PERIOD >      )?      columnName = columnName()      {        if (tableName != null && recordManager.isTableExist(tableName))        {          Table table = recordManager.load(tableName);          List<Column> tableColumns = table.getTableColumns();          if (!tableColumns.contains(columnName))            Message.getInstance().addSchemaError(new Message.Unit(Message.SELECT_COLUMN_RESOLVE_ERROR, columnName));        }      }    )    (      < AS >      nickName = columnName()      {        SelectColumn selectColumn = new SelectColumn();        selectColumn.setTableName(tableName);        selectColumn.setColumnName(columnName);        selectColumn.setNickName(nickName);        return selectColumn;      }    )?    {      SelectColumn selectColumn = new SelectColumn();      selectColumn.setTableName(tableName);      selectColumn.setColumnName(columnName);      selectColumn.setNickName(nickName);      return selectColumn;    }  }  void tableExpression(ArrayList<SelectColumn> selectColumnList) :  {    ArrayList<String> referenceTables;    WhereClause whereClause = null;  }  {    referenceTables = fromClause()    {      for (String referenceTable : referenceTables)      {        if (!recordManager.isTableExist(referenceTable))          Message.getInstance().addSchemaError(new Message.Unit(Message.SELECT_TABLE_EXISTENCE_ERROR, referenceTable));      }      if (!(selectColumnList.size() == 1 && selectColumnList.get(0).equals("*")))      {        for (SelectColumn selectColumn : selectColumnList)        {          String tableName = selectColumn.getTableName();          String columnName = selectColumn.getColumnName();          int count = 0;          if (tableName == null)          {            for (String referenceTable : referenceTables)            {              if (recordManager.isTableExist(referenceTable))              {                if (recordManager.load(referenceTable).getTableColumns().contains(columnName))                  count++;              }            }            if (count > 1)              Message.getInstance().addSchemaError(new Message.Unit(Message.SELECT_COLUMN_RESOLVE_ERROR, columnName));          }        }      }       }    (      whereClause = whereClause(referenceTables)      {        whereClause.setReferenceTables(referenceTables);        whereClause.setSelectColumns(selectColumnList);      }    )?    {      recordManager.printTuples(whereClause);    }  }  ArrayList<String> fromClause() :  {    ArrayList<String> tableReferenceList;  }  {    < FROM >    tableReferenceList = tableReferenceList()    {      return tableReferenceList;    }  }  ArrayList<String> tableReferenceList() :  {    ArrayList<String> referedTableNameList = new ArrayList<String>();    String referedTableName;  }  {    referedTableName = referedTable()    {      referedTableNameList.add(referedTableName);    }    (      < COMMA >      referedTableName = referedTable()      {        referedTableNameList.add(referedTableName);      }    )*    {      return referedTableNameList;    }  }  String referedTable() :  {    String tableName;  }  {    tableName = tableName()    (      < AS >      tableName = tableName()      {        return tableName;      }    )?    {      return tableName;    }  }  WhereClause whereClause(ArrayList<String> referenceTables) :  {    WhereClause whereClause = new WhereClause();    BooleanValueExpression booleanValueExpression;  }  {    < WHERE >    booleanValueExpression = booleanValueExpression(referenceTables)    {      whereClause.setBooleanValueExpression(booleanValueExpression);      return whereClause;    }  }  /*    In this function, I resolved left-recursion problem by modifying function    booleanValueExpression() : booleanTerm() | (booleanValueExpression() < OR > booleanTerm())    to    booleanValueExpression() : booleanTerm() (< OR > booleanTerm())*.  */  BooleanValueExpression booleanValueExpression(ArrayList<String> referenceTables) :  {    BooleanValueExpression booleanValueExpression = new BooleanValueExpression();    BooleanTerm booleanTerm;  }  {    booleanTerm = booleanTerm(referenceTables)    {      booleanValueExpression.addBooleanTerm(booleanTerm);    }    (      < OR >      booleanTerm = booleanTerm(referenceTables)      {        booleanValueExpression.addBooleanTerm(booleanTerm);      }    )*    {      return booleanValueExpression;    }  }  /*    In this function, I resolved left-recursion problem by modifying function    booleanTerm() : booleanFactor() | booleanTerm() < AND > booleanFactor()    to    booleanTerm() : booleanFactor() (< AND > booleanFactor())*.  */  BooleanTerm booleanTerm(ArrayList<String> referenceTables) :  {    BooleanTerm booleanTerm = new BooleanTerm();    BooleanFactor booleanFactor;  }  {    booleanFactor = booleanFactor(referenceTables)    {      booleanTerm.addBooleanFactor(booleanFactor);    }    (      < AND >      booleanFactor = booleanFactor(referenceTables)      {        booleanTerm.addBooleanFactor(booleanFactor);      }    )*    {      return booleanTerm;      }  }  BooleanFactor booleanFactor(ArrayList<String> referenceTables) :  {    BooleanFactor booleanFactor = new BooleanFactor();    BooleanTest booleanTest;  }  {    (      < NOT >      {        booleanFactor.setPrecedingNot(true);      }    )?    booleanTest = booleanTest(referenceTables)    {      booleanFactor.setBooleanTest(booleanTest);      return booleanFactor;    }  }  BooleanTest booleanTest(ArrayList<String> referenceTables) :  {    BooleanTest booleanTest;  }  {    (      booleanTest = predicate(referenceTables)    | booleanTest = parenthesizedBooleanExpression(referenceTables)    )    {      return booleanTest;    }  }  BooleanValueExpression parenthesizedBooleanExpression(ArrayList<String> referenceTables) :  {    BooleanValueExpression booleanValueExpression;  }  {    < LEFT_PAREN >    booleanValueExpression = booleanValueExpression(referenceTables)    < RIGHT_PAREN >    {      return booleanValueExpression;    }  }  /* In this function, I resolved javaCC lookahead problem by inserting LOOKAHEAD keyword */  Predicate predicate(ArrayList<String> referenceTables) :  {    Predicate predicate;  }  {    LOOKAHEAD(4)    predicate = comparisonPredicate(referenceTables)    {      return predicate;    }  | predicate = nullPredicate(referenceTables)    {      return predicate;    }  }  ComparisonPredicate comparisonPredicate(ArrayList<String> referenceTables) :  {    ComparisonPredicate comparisonPredicate = new ComparisonPredicate();    CompOperand leftOperand;    CompOperand rightOperand;    CompOperator operator;  }  {    leftOperand = compOperand(referenceTables)    {      comparisonPredicate.setLeftCompOperand(leftOperand);    }    < COMP_OP >    {      Token token = getToken(0);      operator = new CompOperator(token.image);      comparisonPredicate.setCompOperator(operator);    }    rightOperand = compOperand(referenceTables)    {      comparisonPredicate.setRightCompOperand(rightOperand);      return comparisonPredicate;    }  }  /* In this function, I resolved javaCC lookahead problem by inserting LOOKAHEAD keyword */  NullPredicate nullPredicate(ArrayList<String> referenceTables) :  {    NullPredicate nullPredicate = new NullPredicate();    CompOperand compOperand = new CompOperand();    String tableName = null;    String columnName;    int checkType;  }  {    (      LOOKAHEAD(2)      tableName = tableName()      {        compOperand.setTableName(tableName);      }      < PERIOD >    )?    columnName = columnName()    {      compOperand.setColumnName(columnName);      nullPredicate.setCompOperand(compOperand);    }    checkType = nullOperation()    {      nullPredicate.setCheckType(checkType);      return nullPredicate;    }  }  /* In this function, I resolved javaCC lookahead problem by inserting LOOKAHEAD keyword */  CompOperand compOperand(ArrayList<String> referenceTables) :  {    CompOperand compOperand = null;    String tableName = null;    String columnName;  }  {    compOperand = comparableValue()    {      return compOperand;    }  | (      (         LOOKAHEAD(2)        tableName = tableName()        {          if (!referenceTables.contains(tableName))            Message.getInstance().addSchemaError(new Message.Unit(Message.WHERE_TABLE_NOT_SPECIFIED, null));          compOperand.setTableName(tableName);        }        < PERIOD >      )?      columnName = columnName()      {        compOperand.setColumnName(columnName);      }    )    {      return compOperand;    }  }  int nullOperation() :  {}  {    < IS >    (      < NOT_NULL >      {        return NullPredicate.CHECK_NOT_NULL;      }    | < NULL >      {        return NullPredicate.CHECK_NULL;      }    )  }  void insertColumnsAndSource(Table table) :  {    ArrayList<String> columnNameList = null;    ArrayList<ColumnValue> columnValueList;  }  {    (      columnNameList = columnNameList()      {        for (String columnName : columnNameList)        {           if (table != null && !table.getTableColumnDictionary().containsKey(columnName))            Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_COLUMN_EXISTENCE_ERROR, columnName));        }      }    )?    columnValueList = valueList()    {      if (table != null)      {        table.addTuple(columnNameList, columnValueList);        if (!Message.getInstance().isSchemaErrorExist())        {          recordManager.save(table);          Message.getInstance().addCommandResult(new Message.Unit(Message.INSERT_RESULT, null));        }      }    }  }  ArrayList<ColumnValue> valueList() :  {    ArrayList<ColumnValue> columnValueList = new ArrayList<ColumnValue>();    ColumnValue columnValue;  }  {    < VALUES >    < LEFT_PAREN >    columnValue = value()    {      columnValueList.add(columnValue);    }    (      < COMMA >      columnValue = value()      {        columnValueList.add(columnValue);      }    )*    < RIGHT_PAREN >    {      return columnValueList;    }  }  ColumnValue value() :  {    ColumnValue columnValue;  }  {    < NULL >    {      return null;    }  | columnValue = comparableValue()    {      return columnValue;    }  }  ColumnValue comparableValue() :  {    Token token;  }  {    < INT_VALUE >    {      token = getToken(0);      IntValue intValue = new IntValue();      intValue.setValue(Integer.parseInt(token.image));      intValue.setColumnType(new IntType());      return intValue;    }  | < CHAR_STRING >    {      token = getToken(0);      CharValue charValue = new CharValue();      charValue.setValue(String.valueOf(token.image));      charValue.setColumnType(new CharType());      return charValue;    }  | < DATE_VALUE >    {      token = getToken(0);      DateValue dateValue = new DateValue();      dateValue.setValue(String.valueOf(token.image));      dateValue.setColumnType(new DateType());      return dateValue;    }  }  void tableElementList(Table table) :  {}  {    < LEFT_PAREN >    tableElement(table)    (      < COMMA >      tableElement(table)    )*    < RIGHT_PAREN >  }  /* Table element definition */  void tableElement(Table table) :  {}  {    columnDefinition(table)  | tableConstraintDefinition(table)  }  /* end */  /* Table column */  void columnDefinition(Table table) :  {    Column column = new Column();    String columnName;    ColumnType columnType;  }  {    columnName = columnName()    {      column.setColumnName(columnName);    }    columnType = dataType()    {      column.setColumnType(columnType);    }    (      < NOT_NULL >      {        column.guaranteeNotNull();      }    )?    {      table.addColumn(column);    }  }  /* end */  /* Primary key & Foreign Key */  void tableConstraintDefinition(Table table) :  {}  {    primaryKeyConstraint(table)  | referentialConstraint(table)  }  void primaryKeyConstraint(Table table) :  {    ArrayList<String> columnNameList;  }  {    < PRIMARY_KEY >    columnNameList = columnNameList()    {  	  table.setPrimaryKey(columnNameList);  	}    }  void referentialConstraint(Table table) :  {    ArrayList<String> columnNameList;    String referencingTableName;    ArrayList<String> referencingColumnNameList;  }  {    < FOREIGN_KEY >    columnNameList = columnNameList()    < REFERENCES >    referencingTableName = tableName()    referencingColumnNameList = columnNameList()    {      table.setForeignKey(columnNameList, referencingTableName, referencingColumnNameList);    }  }  /* end */    ArrayList<String> columnNameList() :  {    String columnName;    ArrayList<String> columnNameList = new ArrayList<String>();  }  {    < LEFT_PAREN >    columnName = columnName()    {      columnNameList.add(columnName);    }    (      < COMMA >      columnName = columnName()      {        columnNameList.add(columnName);      }    )*    < RIGHT_PAREN >    {      return columnNameList;    }  }  ArrayList<String> tableNameList() :  {    String tableName;    ArrayList<String> tableNameList;  }  {    < STAR >    {      tableNameList = new ArrayList<String>();      tableNameList.add("*");         return tableNameList;    }  | {      tableNameList = new ArrayList<String>();    }    (      tableName = tableName()      {        tableNameList.add(tableName);      }      (        < COMMA >        tableName = tableName()        {          tableNameList.add(tableName);        }      )*      {        return tableNameList;      }    )  }  String tableName() :  {    String tableName;  }  {    < LEGAL_IDENTIFIER >    {      Token token = getToken(0);      tableName = token.image;      return tableName;    }  }  String columnName() :  {    String columnName;  }  {    < LEGAL_IDENTIFIER >    {      Token token = getToken(0);      columnName = token.image;      columnName = columnName.toLowerCase();      return columnName;    }  }  /* Column type */  ColumnType dataType() :  {}  {    < INT >    {      IntType intType = new IntType();      return intType;    }  |    {      int size;    }    (      < CHAR >      < LEFT_PAREN >      < INT_VALUE >      {        Token token = getToken(0);        size = Integer.parseInt(token.image);      }      < RIGHT_PAREN >    )    {      if (size < 1)        Message.getInstance().addSchemaError(new Message.Unit(Message.CHAR_LENGTH_ERROR, null));            CharType charType = new CharType(size);      return charType;    }  | < DATE >    {      DateType dateType = new DateType();      return dateType;    }  }  /* end */