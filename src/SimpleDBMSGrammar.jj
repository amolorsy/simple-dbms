options{  static = true;  DEBUG_PARSER = false;}PARSER_BEGIN(SimpleDBMSParser)public class SimpleDBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE = 2;  public static final int PRINT_DESC = 3;  public static final int PRINT_SHOW_TABLES = 4;  public static final int PRINT_INSERT = 5;  public static final int PRINT_DELETE = 6;  public static final int PRINT_SELECT = 7;    public static void main(String args[]) throws ParseException  {    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);    while (true)    {      try      {        System.out.print("DB_2013-11379> ");        parser.command();      }      catch (Exception e)      {        printMessage(PRINT_SYNTAX_ERROR);        SimpleDBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {    switch (q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;      case PRINT_DROP_TABLE:      	System.out.println("\'DROP TABLE\' requested");      	break;      case PRINT_DESC:      	System.out.println("\'DESC\' requested");      	break;      case PRINT_SHOW_TABLES:        System.out.println("\'SHOW TABLES\' requested");        break;      case PRINT_INSERT:      	System.out.println("\'INSERT\' requested");      	break;      case PRINT_DELETE:      	System.out.println("\'DELETE\' requested");      	break;      case PRINT_SELECT:      	System.out.println("\'SELECT\' requested");      	break;    }  }}PARSER_END(SimpleDBMSParser)SKIP : { " " | "\r" | "\t" | "\n" }TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE_TABLE : "create table" >| < DROP_TABLE : "drop table" >| < DESC : "desc" >| < SHOW_TABLES : "show tables" >| < INSERT_INTO : "insert into" >| < DELETE_FROM : "delete from" >| < SELECT : "select" >| < PRIMARY_KEY : "primary key" >| < FOREIGN_KEY : "foreign key" >| < REFERENCES : "references" >| < AS : "as" >| < NOT_NULL : "not null" >| < IS : "is" >| < NULL : "null" >| < NOT : "not" >| < WHERE : "where" >| < FROM : "from" >| < VALUES : "values" >| < AND : "and" >| < OR : "or" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < UNDERSCORE : "_" >| < STAR : "*" >| < QUOTE : "'" >| < COMMA : "," >| < PERIOD : "." >| < SIGN : "+" | "-" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >| < DIGIT : [ "0"-"9" ] >| < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >| < NN : < DIGIT > < DIGIT > >| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < ALPHABET : [ "A"-"Z", "a"-"z" ] >| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >| < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET >                        | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >| < NON_QUOTE_SPECIAL_CHARACTERS : [ "`", "~", "!", "@", "#", "$", "%", "^",                                     "&", "*", "(", ")", "-", "_", "+", "=",                                     "\\", "|", ",", ".", "/", "?", "<", ">",                                     "{", "}", ";", ":", "[", "]" ] >}void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      System.exit(0);    }  )}void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      System.out.print("DB_2013-11379> ");      printMessage(q);    }  )+}int query() :{}{  (    createTableQuery()    {      return PRINT_CREATE_TABLE;    }  )| (    dropTableQuery()    {      return PRINT_DROP_TABLE;    }  )| (    descQuery()    {      return PRINT_DESC;    }  )| (    showTablesQuery()    {      return PRINT_SHOW_TABLES;    }  )| (    insertQuery()    {      return PRINT_INSERT;    }  )| (    deleteQuery()    {      return PRINT_DELETE;    }  )| (    selectQuery()    {      return PRINT_SELECT;    }  )}void createTableQuery() :{}{  < CREATE_TABLE >  tableName()  tableElementList()}void dropTableQuery() :{}{  < DROP_TABLE >  tableNameList()}void descQuery() :{}{  < DESC >  tableNameList()}void showTablesQuery() :{}{  < SHOW_TABLES >}void insertQuery() :{}{  < INSERT_INTO >  tableName()  insertColumnsAndSource()}void deleteQuery() :{}{  < DELETE_FROM >  tableName()  (    whereClause()  )?}void selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}void selectList() :{}{  < STAR >| (    selectedColumn()    (      < COMMA >      selectedColumn()    )*  )}void selectedColumn() :{}{  (	(      LOOKAHEAD(2)      tableName()      < PERIOD >    )?    columnName()  )  (    < AS >    columnName()  )?}void tableExpression() :{}{  fromClause()  (    whereClause()  )?}void fromClause() :{}{  < FROM >  tableReferenceList()}void tableReferenceList() :{}{  referedTable()  (    < COMMA >    referedTable()  )*}void referedTable() :{}{  tableName()  (    < AS >    tableName()  )?}void whereClause() :{}{  < WHERE >  booleanValueExpression()}/*  In this function, I resolved left-recursion problem by modifying function  booleanValueExpression() : booleanTerm() | (booleanValueExpression() < OR > booleanTerm())  to  booleanValueExpression() : booleanTerm() (< OR > booleanTerm())?.*/void booleanValueExpression() :{}{  booleanTerm()  (    < OR >    booleanTerm()  )*}/*  In this function, I resolved left-recursion problem by modifying function  booleanTerm() : booleanFactor() | booleanTerm() < AND > booleanFactor()  to  booleanTerm() : booleanFactor() (< AND > booleanFactor())?.*/void booleanTerm() :{}{  booleanFactor()  (    < AND >    booleanFactor()  )*}void booleanFactor() :{}{  (    < NOT >  )?  booleanTest()}void booleanTest() :{}{  predicate()| parenthesizedBooleanExpression()}void parenthesizedBooleanExpression() :{}{  < LEFT_PAREN >  booleanValueExpression()  < RIGHT_PAREN >}/* In this function, I resolved javaCC lookahead problem by inserting LOOKAHEAD keyword */void predicate() :{}{  LOOKAHEAD(4)  comparisonPredicate()| nullPredicate()}void comparisonPredicate() :{}{  compOperand()  < COMP_OP >  compOperand()}/* In this function, I resolved javaCC lookahead problem by inserting LOOKAHEAD keyword */void nullPredicate() :{}{  (    LOOKAHEAD(2)    tableName()    < PERIOD >  )?  columnName()  nullOperation()}/* In this function, I resolved javaCC lookahead problem by inserting LOOKAHEAD keyword */void compOperand() :{}{  comparableValue()| (    (       LOOKAHEAD(2)      tableName()      < PERIOD >    )?    columnName()  )}void nullOperation() :{}{  < IS >  (    < NOT_NULL >  | < NULL >  )}void insertColumnsAndSource() :{}{  (    columnNameList()  )?  valueList()}void valueList() :{}{  < VALUES >  < LEFT_PAREN >  value()  (    < COMMA >    value()  )*  < RIGHT_PAREN >}void value() :{}{  < NULL >| comparableValue()}void comparableValue() :{}{  < INT_VALUE >| < CHAR_STRING >| < DATE_VALUE >}void tableElementList() :{}{  < LEFT_PAREN >  tableElement()  (    < COMMA >    tableElement()  )*  < RIGHT_PAREN >}void tableElement() :{}{  columnDefinition()| tableConstraintDefinition()}void columnDefinition() :{}{  columnName()  dataType()  (    < NOT_NULL >  )?}void tableConstraintDefinition() :{}{  primaryKeyConstraint()| referentialConstraint()}void primaryKeyConstraint() :{}{  < PRIMARY_KEY >  columnNameList()}void referentialConstraint() :{}{  < FOREIGN_KEY >  columnNameList()  < REFERENCES >  tableName()  columnNameList()}void columnNameList() :{}{  < LEFT_PAREN >  columnName()  (    < COMMA >    columnName()  )*  < RIGHT_PAREN >}void tableNameList() :{}{  < STAR >| (    tableName()    (      < COMMA >      tableName()    )*  )}void tableName() :{}{  < LEGAL_IDENTIFIER >}void columnName() :{}{  < LEGAL_IDENTIFIER >}void dataType() :{}{  < INT >| (    < CHAR >    < LEFT_PAREN >    < INT_VALUE >    < RIGHT_PAREN >  )| < DATE >}