  options  {    static = true;    DEBUG_PARSER = false;  }  PARSER_BEGIN(SimpleDBMSParser)  import java.util.List;  import java.util.ArrayList;  import java.util.Map;  import column.*;  import column.type.*;  import column.value.*;  public class SimpleDBMSParser  {    private static RecordManager recordManager;    	    public static void main(String args[]) throws ParseException    {      SimpleDBMSParser parser = new SimpleDBMSParser(System.in);      recordManager = new RecordManager();      recordManager.setup();      while (true)      {        try        {          System.out.print("DB_2013-11379> ");          parser.command();        }        catch (Exception e)        {          if (e.getMessage() != null)            Message.print(Message.PRINT_SYNTAX_ERROR, null);          SimpleDBMSParser.ReInit(System.in);        }      }    }  }  PARSER_END(SimpleDBMSParser)  SKIP : { " " | "\r" | "\t" | "\n" }  TOKEN : /* Keywords */  {    < EXIT : "exit" >  | < INT : "int" >  | < CHAR : "char" >  | < DATE : "date" >  | < CREATE_TABLE : "create table" >  | < DROP_TABLE : "drop table" >  | < DESC : "desc" >  | < SHOW_TABLES : "show tables" >  | < INSERT_INTO : "insert into" >  | < DELETE_FROM : "delete from" >  | < SELECT : "select" >  | < PRIMARY_KEY : "primary key" >  | < FOREIGN_KEY : "foreign key" >  | < REFERENCES : "references" >  | < AS : "as" >  | < IS : "is" >  | < NULL : "null" >  | < NOT : "not" >  | < NOT_NULL : "not null" >  | < WHERE : "where" >  | < FROM : "from" >  | < VALUES : "values" >  | < AND : "and" >  | < OR : "or" >  }  TOKEN :  {    < SEMICOLON : ";" >  | < LEFT_PAREN : "(" >  | < RIGHT_PAREN : ")" >  | < STAR : "*" >  | < QUOTE : "'" >  | < UNDERSCORE : "_" >  | < COMMA : "," >  | < PERIOD : "." >  | < SIGN : "+" | "-" >  | < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >  | < DIGIT : [ "0"-"9" ] >  | < NNNN : < DIGIT > < DIGIT > < DIGIT > < DIGIT > >  | < NN : < DIGIT > < DIGIT > >  | < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >  | < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >  | < ALPHABET : [ "A"-"Z", "a"-"z" ] >  | < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >  | < COMP_OP : "<" | ">" | "=" | ">=" | "<=" | "!=" >  | < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET >                          | < NON_QUOTE_SPECIAL_CHARACTERS > | " " >  | < NON_QUOTE_SPECIAL_CHARACTERS : [ "`", "~", "!", "@", "#", "$", "%", "^",                                       "&", "*", "(", ")", "-", "_", "+", "=",                                       "\\", "|", ",", ".", "/", "?", "<", ">",                                       "{", "}", ";", ":", "[", "]" ] >  }  void command() :  {}  {    queryList()  | (      < EXIT >      < SEMICOLON >      {        recordManager.quit();        System.exit(0);      }    )  }  void queryList() :  {    int query;  }  {    (      {        // Initialize array lists to store results of execution        Message.getInstance().resetSchemaErrors();        Message.getInstance().resetCommandResults();      }      query = query()      < SEMICOLON >      {        if (query == Message.PRINT_CREATE_TABLE)        {          if (Message.getInstance().isSchemaErrorExist())          {            Message.Unit unit = Message.getInstance().getSchemaErrors().get(0);            Message.print(unit.getMessageType(), unit.getWord());            throw new ParseException();          }          else          {            // Error doesn't exist            Message.Unit unit = Message.getInstance().getCommandResults().get(0);            Message.print(unit.getMessageType(), unit.getWord());          }        }        if (query == Message.PRINT_DROP_TABLE)        {          ArrayList<Message.Unit> commandResults = Message.getInstance().getCommandResults();          for (Message.Unit unit : commandResults)            Message.print(unit.getMessageType(), unit.getWord());          // Check if error exists          if (Message.getInstance().isSchemaErrorExist())            throw new ParseException();        }              if (query == Message.PRINT_DESC)        {          if (Message.getInstance().isSchemaErrorExist())          {            Message.Unit unit = Message.getInstance().getSchemaErrors().get(0);            Message.print(unit.getMessageType(), unit.getWord());            throw new ParseException();          }        }        if (query == Message.PRINT_INSERT)        {          if (Message.getInstance().isSchemaErrorExist())          {            Message.Unit unit = Message.getInstance().getSchemaErrors().get(0);            Message.print(unit.getMessageType(), unit.getWord());            throw new ParseException();          }          else          {            // Error doesn't exist            Message.Unit unit = Message.getInstance().getCommandResults().get(0);            Message.print(unit.getMessageType(), unit.getWord());          }        }        if (query == Message.PRINT_DELETE)        {        }        if (query == Message.PRINT_SELECT)        {        }        Message.print(query, null);      }    )+  }  int query() :  {}  {    (      createTableQuery()      {        return Message.PRINT_CREATE_TABLE;      }    )  | (      dropTableQuery()      {        return Message.PRINT_DROP_TABLE;      }    )  | (      descQuery()      {        return Message.PRINT_DESC;      }    )  | (      showTablesQuery()      {        return Message.PRINT_SHOW_TABLES;      }    )  | (      insertQuery()      {        return Message.PRINT_INSERT;      }    )  | (      deleteQuery()      {        return Message.PRINT_DELETE;      }    )  | (      selectQuery()      {        return Message.PRINT_SELECT;      }    )  }  void createTableQuery() :  {    String tableName;    Table table;  }  {    < CREATE_TABLE >    tableName = tableName()    {      tableName = tableName.toLowerCase();            if (recordManager.isTableExist(tableName))      {        Message.getInstance().addSchemaError(new Message.Unit(Message.TABLE_EXISTENCE_ERROR, null));      }           table = new Table(recordManager);      table.setTableName(tableName);    }    tableElementList(table)    {      if (!Message.getInstance().isSchemaErrorExist())      {        recordManager.save(table);        Message.getInstance().addCommandResult(new Message.Unit(Message.CREATE_TABLE_SUCCESS, tableName));      }    }  }  void dropTableQuery() :  {    ArrayList<String> tableNameList;  }  {    < DROP_TABLE >    tableNameList = tableNameList()    {      if (tableNameList.size() == 1 && tableNameList.get(0).equals("*"))      {        recordManager.dropAllTables();        Message.getInstance().addCommandResult(new Message.Unit(Message.DROP_SUCCESS_ALL_TABLES, null));      }      else      {        for (String tableName : tableNameList)        {          if (!recordManager.isTableExist(tableName))          {            Message.getInstance().addSchemaError(new Message.Unit(Message.NO_SUCH_TABLE, null));            Message.getInstance().addCommandResult(new Message.Unit(Message.NO_SUCH_TABLE, null));          }          else if (recordManager.getTableDictionary().get(tableName).getReferencingTable() != null)          {            Message.getInstance().addSchemaError(new Message.Unit(Message.DROP_REFERENCED_TABLE_ERROR, tableName));            Message.getInstance().addCommandResult(new Message.Unit(Message.DROP_REFERENCED_TABLE_ERROR, tableName));          }          else          {            recordManager.dropTable(tableName);            Message.getInstance().addCommandResult(new Message.Unit(Message.DROP_SUCCESS, tableName));          }        }      }    }  }  void descQuery() :  {    ArrayList<String> tableNameList;  }  {    < DESC >    tableNameList = tableNameList()    {      recordManager.printDesc(tableNameList);    }  }  void showTablesQuery() :  {}  {    < SHOW_TABLES >  }  void insertQuery() :  {    String tableName;    Table table = null;  }  {    < INSERT_INTO >    tableName = tableName()    {      if (!recordManager.isTableExist(tableName))      {        Message.getInstance().addSchemaError(new Message.Unit(Message.NO_SUCH_TABLE, null));      }      else      {        table = recordManager.load(tableName);       }    }    insertColumnsAndSource(table)  }  void deleteQuery() :  {    String tableName;    Table table = null;  }  {    < DELETE_FROM >    tableName = tableName()    {      if (!recordManager.isTableExist(tableName))        Message.getInstance().addSchemaError(new Message.Unit(Message.NO_SUCH_TABLE, null));      else        table = recordManager.load(tableName);    }    (      whereClause(table)    )?  }  void selectQuery() :  {}  {    < SELECT >    selectList()    tableExpression()  }  void selectList() :  {}  {    < STAR >  | (      selectedColumn()      (        < COMMA >        selectedColumn()      )*    )  }  void selectedColumn() :  {}  {    (      (        LOOKAHEAD(2)        tableName()        < PERIOD >      )?      columnName()    )    (      < AS >      columnName()    )?  }  void tableExpression() :  {}  {    fromClause()    (      whereClause()    )?  }  void fromClause() :  {}  {    < FROM >    tableReferenceList()  }  void tableReferenceList() :  {}  {    referedTable()    (      < COMMA >      referedTable()    )*  }  String referedTable() :  {    String tableName;  }  {    tableName = tableName()    (      < AS >      tableName = tableName()      {        return tableName;      }    )?    {      return tableName;    }  }  void whereClause(Table table) :  {}  {    < WHERE >    booleanValueExpression(table)  }  /*    In this function, I resolved left-recursion problem by modifying function    booleanValueExpression() : booleanTerm() | (booleanValueExpression() < OR > booleanTerm())    to    booleanValueExpression() : booleanTerm() (< OR > booleanTerm())*.  */  void booleanValueExpression(Table table) :  {}  {    booleanTerm(table)    (      < OR >      booleanTerm(table)    )*  }  /*    In this function, I resolved left-recursion problem by modifying function    booleanTerm() : booleanFactor() | booleanTerm() < AND > booleanFactor()    to    booleanTerm() : booleanFactor() (< AND > booleanFactor())*.  */  void booleanTerm(Table table) :  {}  {    booleanFactor(table)    (      < AND >      booleanFactor(table)    )*  }  void booleanFactor(Table table) :  {}  {    (      < NOT >    )?    booleanTest()  }  void booleanTest(Table table) :  {}  {    predicate(table)  | parenthesizedBooleanExpression()  }  void parenthesizedBooleanExpression() :  {}  {    < LEFT_PAREN >    booleanValueExpression()    < RIGHT_PAREN >  }  /* In this function, I resolved javaCC lookahead problem by inserting LOOKAHEAD keyword */  void predicate(Table table) :  {}  {    LOOKAHEAD(4)    comparisonPredicate(table)  | nullPredicate()  }  void comparisonPredicate(Table table) :  {}  {    compOperand(table)    < COMP_OP >    compOperand(table)  }  /* In this function, I resolved javaCC lookahead problem by inserting LOOKAHEAD keyword */  void nullPredicate() :  {}  {    (      LOOKAHEAD(2)      tableName()      < PERIOD >    )?    columnName()    nullOperation()  }  /* In this function, I resolved javaCC lookahead problem by inserting LOOKAHEAD keyword */  void compOperand(Table table) :  {    String tableName;    String columnName;  }  {    comparableValue()  | (      (         LOOKAHEAD(2)        tableName = tableName()        < PERIOD >      )?      columnName = columnName()      {        List<Tuple> tuples = table.getTuples();        for (Tuple tuple : tuples)        {          Map<String, ColumnValue> columnValueDictionary = tuple.getColumnValueDictionary();          if (columnValueDictionary.get(columnName) == null)            Message.getInstance().addSchemaError(new Message.Unit(Message.WHERE_IN_COMPARABLE_ERROR, null));        }      }    )    {      if (recordManager.isTableExist(tableName))      {        Table table = recordManager.load(tableName);        Column column = table.getTableColumnDictionary(      }    }  }  void nullOperation() :  {}  {    < IS >    (      < NOT_NULL >    | < NULL >    )  }  void insertColumnsAndSource(Table table) :  {    ArrayList<String> columnNameList = null;    Tuple tuple;  }  {    (      columnNameList = columnNameList()      {        for (String columnName : columnNameList)        {           if (table != null && !table.getTableColumnDictionary().containsKey(columnName))            Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_COLUMN_EXISTENCE_ERROR, columnName));        }      }    )?    tuple = valueList(table, columnNameList)    {      if (table != null && !Message.getInstance().isSchemaErrorExist())      {        table.addTuple(tuple);        recordManager.save(table);        Message.getInstance().addCommandResult(new Message.Unit(Message.INSERT_RESULT, null));      }    }  }  Tuple valueList(Table table, ArrayList<String> columnNameList) :  {    ArrayList<String> selectedColumnNameList = columnNameList;    List<Column> tableColumns = null;    Map<String, Column> tableColumnDictionary = null;        Tuple tuple = new Tuple();	ColumnValue columnValue;    int count = 0;  }  {    < VALUES >    < LEFT_PAREN >    columnValue = value()    {      if (table != null)      {        tableColumns = table.getTableColumns();        tableColumnDictionary = table.getTableColumnDictionary();           if (selectedColumnNameList == null)        {          Column column = tableColumns.get(count++);          if (columnValue == null && !column.canHaveNullValue())            Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_COLUMN_NON_NULLABLE_ERROR, column.getColumnName()));          if (!columnValue.getColumnType().toString().equals(column.getColumnType().toString()))            Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_TYPE_MISMATCH_ERROR, null));          tuple.addColumnValue(columnValue);        }        else        {          for (Column column : tableColumns)            tuple.addColumnValue(null);                  String selectedColumnName = selectedColumnNameList.get(count++);          Column selectedColumn = tableColumnDictionary.get(selectedColumnName);          if (columnValue == null && !selectedColumn.canHaveNullValue())            Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_COLUMN_NON_NULLABLE_ERROR, selectedColumnName));          if (!columnValue.getColumnType().toString().equals(selectedColumn.getColumnType().toString()))          {            if (!(columnValue.getColumnType() instanceof CharType) || !(selectedColumn.getColumnType() instanceof CharType))              Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_TYPE_MISMATCH_ERROR, null));          }          tuple.replaceColumnValue(tableColumns.indexOf(selectedColumn), columnValue);        }      }    }    (      < COMMA >      columnValue = value()      {        if (table != null)        {          if (selectedColumnNameList == null)          {            Column column = tableColumns.get(count++);            if (columnValue == null && !column.canHaveNullValue())              Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_COLUMN_NON_NULLABLE_ERROR, column.getColumnName()));            if (!columnValue.getColumnType().toString().equals(column.getColumnType().toString()))              Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_TYPE_MISMATCH_ERROR, null));            tuple.addColumnValue(columnValue);          }          else          {               String selectedColumnName = selectedColumnNameList.get(count++);            Column selectedColumn = tableColumnDictionary.get(selectedColumnName);            if (columnValue == null && !selectedColumn.canHaveNullValue())              Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_COLUMN_NON_NULLABLE_ERROR, selectedColumnName));            if (!columnValue.getColumnType().toString().equals(selectedColumn.getColumnType().toString()))            {              if (!(columnValue.getColumnType() instanceof CharType) || !(selectedColumn.getColumnType() instanceof CharType))                Message.getInstance().addSchemaError(new Message.Unit(Message.INSERT_TYPE_MISMATCH_ERROR, null));            }            tuple.replaceColumnValue(tableColumns.indexOf(selectedColumn), columnValue);          }        }      }    )*    < RIGHT_PAREN >    {      return tuple;    }  }  ColumnValue value() :  {    ColumnValue columnValue;  }  {    < NULL >    {      return null;    }  | columnValue = comparableValue()    {      return columnValue;    }  }  ColumnValue comparableValue() :  {    Token token;  }  {    < INT_VALUE >    {      token = getToken(0);            IntValue intValue = new IntValue();      intValue.setValue(Integer.parseInt(token.image));      intValue.setColumnType(new IntType());      return intValue;    }  | < CHAR_STRING >    {      token = getToken(0);            CharValue charValue = new CharValue();      charValue.setValue(String.valueOf(token.image));      charValue.setColumnType(new CharType());      return charValue;    }  | < DATE_VALUE >    {      token = getToken(0);      DateValue dateValue = new DateValue();      dateValue.setValue(String.valueOf(token.image));      dateValue.setColumnType(new DateType());      return dateValue;    }  }  void tableElementList(Table table) :  {}  {    < LEFT_PAREN >    tableElement(table)    (      < COMMA >      tableElement(table)    )*    < RIGHT_PAREN >  }  /* Table element definition */  void tableElement(Table table) :  {}  {    columnDefinition(table)  | tableConstraintDefinition(table)  }  /* end */  /* Table column */  void columnDefinition(Table table) :  {    Column column = new Column();    String columnName;    ColumnType columnType;  }  {    columnName = columnName()    {      column.setColumnName(columnName);    }    columnType = dataType()    {      column.setColumnType(columnType);    }    (      < NOT_NULL >      {        column.guaranteeNotNull();      }    )?    {      table.addColumn(column);    }  }  /* end */  /* Primary key & Foreign Key */  void tableConstraintDefinition(Table table) :  {}  {    primaryKeyConstraint(table)  | referentialConstraint(table)  }  void primaryKeyConstraint(Table table) :  {    ArrayList<String> columnNameList;  }  {    < PRIMARY_KEY >    columnNameList = columnNameList()    {  	  table.setPrimaryKey(columnNameList);  	}    }  void referentialConstraint(Table table) :  {    ArrayList<String> columnNameList;    String referencingTableName;    ArrayList<String> referencingColumnNameList;  }  {    < FOREIGN_KEY >    columnNameList = columnNameList()    < REFERENCES >    referencingTableName = tableName()    referencingColumnNameList = columnNameList()    {      table.setForeignKey(columnNameList, referencingTableName, referencingColumnNameList);    }  }  /* end */    ArrayList<String> columnNameList() :  {    String columnName;    ArrayList<String> columnNameList = new ArrayList<String>();  }  {    < LEFT_PAREN >    columnName = columnName()    {      columnNameList.add(columnName);    }    (      < COMMA >      columnName = columnName()      {        columnNameList.add(columnName);      }    )*    < RIGHT_PAREN >    {      return columnNameList;    }  }  ArrayList<String> tableNameList() :  {    String tableName;    ArrayList<String> tableNameList;  }  {    < STAR >    {      tableNameList = new ArrayList<String>();      tableNameList.add("*");         return tableNameList;    }  | {      tableNameList = new ArrayList<String>();    }    (      tableName = tableName()      {        tableNameList.add(tableName);      }      (        < COMMA >        tableName = tableName()        {          tableNameList.add(tableName);        }      )*      {        return tableNameList;      }    )  }  String tableName() :  {    String tableName;  }  {    < LEGAL_IDENTIFIER >    {      Token token = getToken(0);      tableName = token.image;      return tableName;    }  }  String columnName() :  {    String columnName;  }  {    < LEGAL_IDENTIFIER >    {      Token token = getToken(0);      columnName = token.image;      columnName = columnName.toLowerCase();      return columnName;    }  }  /* Column type */  ColumnType dataType() :  {}  {    < INT >    {      IntType intType = new IntType();      return intType;    }  |    {      int size;    }    (      < CHAR >      < LEFT_PAREN >      < INT_VALUE >      {        Token token = getToken(0);        size = Integer.parseInt(token.image);      }      < RIGHT_PAREN >    )    {      if (size < 1)        Message.getInstance().addSchemaError(new Message.Unit(Message.CHAR_LENGTH_ERROR, null));            CharType charType = new CharType(size);      return charType;    }  | < DATE >    {      DateType dateType = new DateType();      return dateType;    }  }  /* end */